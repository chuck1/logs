/*
 * DO NOT EDIT THIS FILE
 *
 * /home/crymal/git/esolv_c/modules/logs/include/logs/stream.hpp_in
 */

#ifndef LOGS_STREAM_HPP_IN
#define LOGS_STREAM_HPP_IN

#include <iostream>
#include <cstring>

#include <logs/decl.hpp>

namespace logs {

template<int MODE, bool ENABLED>
class stream
{
	public:
		stream(std::ostream& ss): _ss(ss)
		{}
		stream(std::ostream& ss, bool enabled): _ss(ss), _enabled(enabled)
		{}
		stream(stream&& l): _ss(l._ss)
		{}
		~stream()
		{}
		template<typename T>
		stream&		operator<<(T const & t)
		{
			if(MODE == logs::mode::COMPILE_TIME)
			{
				if(ENABLED) _ss << t;
			}
			else if(MODE == logs::mode::RUN_TIME)
			{
				if(_enabled) _ss << t;
			}

			return *this;
		}
		stream&		operator<<(std::ostream& (*fun)(std::ostream&))
		{
			if(MODE == logs::mode::COMPILE_TIME)
			{
				if(ENABLED) (*fun)(_ss);
			}
			else if(MODE == logs::mode::RUN_TIME)
			{
				if(_enabled) (*fun)(_ss);
			}
			
			return *this;
		}
		template<typename... Args>
		stream&		printf(char const * fmt, Args... args)
		{
			char buf[1000];

			if(MODE == logs::mode::COMPILE_TIME) {
				if(ENABLED) {
					sprintf(buf, fmt, args...);
					_ss.write(buf, strlen(buf));
				}
			}
			else if(MODE == logs::mode::RUN_TIME) {
				if(_enabled) {
					sprintf(buf, fmt, args...);
					_ss.write(buf, strlen(buf));
				}
			}

			return *this;
		}
		template<typename... Args>
		stream&		printf(char const * fmt)
		{
			char buf[1000];

			if(MODE == logs::mode::COMPILE_TIME) {
				if(ENABLED) {
					strcat(buf, fmt);
					_ss.write(buf, strlen(buf));
				}
			}
			else if(MODE == logs::mode::RUN_TIME) {
				if(_enabled) {
					strcat(buf, fmt);
					_ss.write(buf, strlen(buf));
				}
			}

			return *this;
		}
		std::ostream&		_ss;
		bool			_enabled;
};


}

#endif
